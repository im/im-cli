#!/usr/bin/env node

const path = require('path')
const userHome = require('user-home')
const exists = require('fs').existsSync
const inquirer = require('inquirer')
const download = require('download-git-repo')
const chalk = require('chalk')
const ora = require('ora')
const rm = require('rimraf').sync
const checkVersion = require('../lib/check-version.js')
const fetchTemplateList = require('../lib/fetch-template-list.js')

checkVersion(() => {
    init()
})

function init() {
    // 
    const tmpRepo = path.resolve(userHome, '.im-templates')
    fetchTemplateList((templateList) => {
        const choices = templateList.map(template => {
            return {
                name: `${template.name} - ${template.description}`,
                value: template.name
            }
        })
        // console.log('choices: ', choices);
        inquirer.prompt([{
            type: 'list',
            name: 'template',
            choices,
            message: 'Choose template you want'
        }]).then(answer => {
            const tmpName = answer.template
            const tmpDest = path.join(tmpRepo, tmpName)
            const tmpUrl = templateList.find(template => template.name === tmpName).url
            if (exists(tmpDest)) { // 判断本地缓存是否有模板
                inquirer.prompt([
                    {
                        type: 'confirm',
                        name: 'override',
                        message: 'The template exists.Override?'
                    }
                ]).then(answer => {
                    if (answer.override) {
                        rm(tmpDest)
                        downloadAndGenerate(tmpRepo, tmpName, tmpUrl)
                    } else {
                        generate(tmpDest)
                    }
                });
            } else {
                downloadAndGenerate(tmpRepo, tmpName, tmpUrl)
            }
        })
    })
}


function downloadAndGenerate (tmpRepo, tmpName, tmpUrl) {
    const spinner = ora('downloading template...')
    const tmpDest = path.join(tmpRepo, tmpName)
    // inquirer.prompt([{
    //     type: 'input',
    //     name: 'branch',
    //     message: `the name of branch you need in ${tmpName}`,
    //     default: 'master'
    // }]).then(answer => {
    //     spinner.start()
        download(`${tmpUrl}`, tmpDest, {
            clone: false
        }, (err) => {
            if (err) {
                spinner.fail(chalk.red('download template unsuccessfully'))
                console.log(err)
            } else {
                spinner.succeed(chalk.green('download template successfully'))
                // generate(tmpDest)
            }
        })
    // })
}