#!/usr/bin/env node

const path = require('path')
const userHome = require('user-home')
const exists = require('fs').existsSync
const inquirer = require('inquirer')
const download = require('download-git-repo')
const chalk = require('chalk')
const ora = require('ora')
const rm = require('rimraf').sync
const checkVersion = require('../lib/checkVersion') // 校验版本
const fetchTemplateList = require('../lib/fetchTemplateList') // 获取模板
const generate = require('../lib/generate')

checkVersion(() => {
    init()
})

function init() {
    const tmpRepo = path.resolve(userHome, '.im-templates') // 模板缓存路径
    fetchTemplateList((templateList) => {
        const choices = templateList.map(template => {
            return {
                name: `${template.name} - ${template.description}`,
                value: template.name
            }
        })
        inquirer.prompt([{
            type: 'list',
            name: 'template',
            choices,
            message: '请选择需要创建的模板'
        }]).then(answer => {
            const tmpName = answer.template
            const tmpDest = path.join(tmpRepo, tmpName)
            const tmpUrl = templateList.find(template => template.name === tmpName).url
            if (exists(tmpDest)) { // 判断本地缓存是否有模板
                // inquirer.prompt([
                //     {
                //         type: 'confirm',
                //         name: 'override',
                //         message: chalk.red('是否覆盖当前缓存中的模板?')
                //     }
                // ]).then(answer => {
                //     if (answer.override) {
                //         rm(tmpDest)
                //         downloadAndGenerate(tmpRepo, tmpName, tmpUrl)
                //     } else {
                //         generate(tmpDest, tmpName)
                //     }
                // });
                generate(tmpDest, tmpName)
            } else {
                downloadAndGenerate(tmpRepo, tmpName, tmpUrl)
            }
        })
    })
}


function downloadAndGenerate(tmpRepo, tmpName, tmpUrl) {
    const spinner = ora('开始下载模板...')
    const tmpDest = path.join(tmpRepo, tmpName)
    download(`${tmpUrl}`, tmpDest, { // 下载模板
        clone: false
    }, (err) => {
        if (err) {
            spinner.fail(chalk.red('下载模板失败'))
            console.log(err)
        } else {
            spinner.succeed(chalk.green('下载模板成功'))
            generate(tmpDest, tmpName)
        }
    })
}